#!/bin/bash

echo "CONTROL PLANE PROVISIONING"

echo "The script is based on: https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/"

sudo swapoff -a

sudo apt-get update && sudo apt-get upgrade


echo "Enable IPv4 packet forwarding"

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.ipv4.ip_forward = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system



# INSTALLING CONTAINERD

echo "INSTALLING CONTAINERD"
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

sudo apt-get install containerd.io

echo "resetting the containerd configuration"
containerd config default > /etc/containerd/config.toml

sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

echo "restarting containerd daemon"
sudo systemctl restart containerd



# INSTALLING KUBEADM, KUBELET AND KUBECTL

echo "INSTALLING KUBEADM, KUBELET AND KUBECTL"

sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl gpg

# If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

sudo systemctl enable --now kubelet



# INITIALIZING YOUR CONTROL-PLANE NODE
echo "INITIALIZING YOUR CONTROL-PLANE NODE"

echo "Extracting host IP address"
host_ip_address=$(ip a show enX0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)

kubeadm init --pod-network-cidr="${pod-network-cidr}" --apiserver-advertise-address=$host_ip_address


# TO MAKE KUBECTL WORK FOR YOUR NON-ROOT USER
echo "MAKE KUBECTL WORK FOR YOUR NON-ROOT USER"

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

echo "MAKE KUBECTL WORK FOR YOUR NON-ROOT USER COMPLTE"



# INSTALLING flannel
kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml



echo "WORKER NODE JOIN COMMAND"
kubeadm token create --print-join-command