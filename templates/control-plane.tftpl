#!/bin/bash

echo "CONTROL PLANE PROVISIONING"

echo "The script is based on: https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/"

# Turn swap off
sudo swapoff -a
sudo sed -i '/swap/d' /etc/fstab
mount -a

sudo apt-get update && sudo apt-get upgrade


echo "Enable IPv4 packet forwarding"

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.ipv4.ip_forward = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system



# INSTALLING CONTAINERD

echo "INSTALLING CONTAINERD"
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

sudo apt-get install containerd.io

echo "resetting the containerd configuration"
containerd config default > /etc/containerd/config.toml

sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

echo "restarting containerd daemon"
sudo systemctl restart containerd



# INSTALLING KUBEADM, KUBELET AND KUBECTL

echo "INSTALLING KUBEADM, KUBELET AND KUBECTL"

sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl gpg

# If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

sudo systemctl enable --now kubelet



# INITIALIZING YOUR CONTROL-PLANE NODE
echo "INITIALIZING YOUR CONTROL-PLANE NODE"

echo "Extracting host IP address"
host_ip_address=$(ip a show enX0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)

kubeadm init --pod-network-cidr="${pod-network-cidr}" --apiserver-advertise-address=$host_ip_address


# TO MAKE KUBECTL WORK FOR YOUR USER
echo "MAKE KUBECTL WORK FOR YOUR USER"

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

echo "MAKE KUBECTL WORK FOR YOUR NON-ROOT USER COMPLTE"


# WORKER NODE JOIN COMMAND
echo "WORKER NODE JOIN COMMAND"
kubeadm token create --print-join-command


# INSTALLING flannel
kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

# # Setup flannel
# kubectl create --kubeconfig /root/.kube/config ns kube-flannel
# kubectl label --overwrite ns kube-flannel pod-security.kubernetes.io/enforce=privileged
# helm repo add flannel https://flannel-io.github.io/flannel/
# helm install flannel --set podCidr="${pod-network-cidr}" --namespace kube-flannel flannel/flannel


# INSTALLING HELM 
# Installing HELM package manager - https://helm.sh/docs/intro/install/
curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
sudo apt-get install apt-transport-https --yes
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm


# INSTALLING AWS LOAD BALANCER CONTROLLER

# # INSTALL AWS LOAD BALANCER CONTROLLER
# helm repo add eks https://aws.github.io/eks-charts
# helm repo update eks

# helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
#   --set clusterName=kubernetes \
#   --set serviceAccount.create=true \
#   --set serviceAccount.name="aws-load-balancer-controller" \
#   --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="arn:aws:iam::"${account_id}":role/ALBIngressControllerRole" \
#   -n kube-system


# Annotate the kubernetes service account with the ARN of the IAM role you created.
kubectl annotate serviceaccount -n kube-system aws-load-balancer-controller \
    eks.amazonaws.com/role-arn=arn:aws:iam::"${account_id}":role/"${load_balancer_controller_iam_role}"

# Verify that the controller is installed
kubectl get deployment -n kube-system aws-load-balancer-controller


# INSTALLING INGRESS CONTROLLER USING HELM

# Installing Ingress-Nginx Controller - https://kubernetes.github.io/ingress-nginx/deploy/#quick-start
helm upgrade --install ingress-nginx ingress-nginx \
  --repo https://kubernetes.github.io/ingress-nginx \
  --namespace ingress-nginx --create-namespace


# CREATING AN INGRESS RESOURCE

## Temporary fix for https://stackoverflow.com/questions/61616203/nginx-ingress-controller-failed-calling-webhook
kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission

##Â This can be easily run with: kubectl apply -f https://storage.googleapis.com/minikube-site-examples/ingress-example.yaml but I choose to list the entire script

# Apply ingress resource
cat > ingress-example.yaml << 'EOF'
kind: Pod
apiVersion: v1
metadata:
  name: foo-app
  labels:
    app: foo
spec:
  containers:
    - name: foo-app
      image: 'kicbase/echo-server:1.0'
---
kind: Service
apiVersion: v1
metadata:
  name: foo-service
spec:
  selector:
    app: foo
  ports:
    - port: 8080
---
kind: Pod
apiVersion: v1
metadata:
  name: bar-app
  labels:
    app: bar
spec:
  containers:
    - name: bar-app
      image: 'kicbase/echo-server:1.0'
---
kind: Service
apiVersion: v1
metadata:
  name: bar-service
spec:
  selector:
    app: bar
  ports:
    - port: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
spec:
  rules:
    - http:
        paths:
          - pathType: Prefix
            path: /foo
            backend:
              service:
                name: foo-service
                port:
                  number: 8080
          - pathType: Prefix
            path: /bar
            backend:
              service:
                name: bar-service
                port:
                  number: 8080
---
EOF

# Run the Kubernetes ingress resource script
kubectl apply -f ingress-example.yaml